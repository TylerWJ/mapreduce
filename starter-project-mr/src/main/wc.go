package main

import (
	"fmt"
	"mr/mapreduce"
	"os"
	"strconv"
	"strings"
	"unicode"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {

	// Setup new array for storage of intermediate strings
	var newArray []mapreduce.KeyValue

	// Splits the given string at Unicode, and rets an array of slices

	// w := strings.FieldsFunc(value, func(test int32) bool {
	// 	return !unicode.IsLetter(test)
	// })

	w := strings.FieldsFunc(value, func(r rune) bool {
		return !unicode.IsLetter(r)
	})

	// Can use blank identifier because word is all that's needed
	for _, word := range w {
		newArray = append(newArray, mapreduce.KeyValue{Key: word, Value: "1"})
	}

	return newArray
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	sum := 0
	for i := 0; i < len(values); i++ {
		n, sumErr := strconv.Atoi(values[i])
		if sumErr != nil {
			fmt.Println("Sum Error")
			os.Exit(1)
		}
		sum += n
	}

	s := strconv.Itoa(sum)
	return s
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
// known issue: both 2) and 3) work on OSX but not Ubuntu 16.04
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
